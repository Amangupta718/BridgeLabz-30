
public class FibonacciComparison {

    // Recursive Fibonacci (O(2^N))
    public static int fibonacciRecursive(int n) {
        if (n <= 1) return n;
        return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
    }

    // Iterative Fibonacci (O(N))
    public static int fibonacciIterative(int n) {
        if (n <= 1) return n;
        int a = 0, b = 1, sum;
        for (int i = 2; i <= n; i++) {
            sum = a + b;
            a = b;
            b = sum;
        }
        return b;
    }

    public static void main(String[] args) {
        int N = 30; // Change this value to test performance

        // Measure Recursive Fibonacci Time
        long start1 = System.nanoTime();
        int recResult = fibonacciRecursive(N);
        long end1 = System.nanoTime();
        System.out.println("Recursive Fibonacci(" + N + "): " + recResult + 
                           " | Time: " + (end1 - start1) / 1e6 + " ms");

        // Measure Iterative Fibonacci Time
        long start2 = System.nanoTime();
        int iterResult = fibonacciIterative(N);
        long end2 = System.nanoTime();
        System.out.println("Iterative Fibonacci(" + N + "): " + iterResult + 
                           " | Time: " + (end2 - start2) / 1e6 + " ms");
    }
}

